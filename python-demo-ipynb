{"nbformat_minor": 0, "nbformat": 4, "cells": [{"source": "### IPython/Pylab for scientists", "cell_type": "markdown", "metadata": {}}, {"source": "### Calculator/ Numbers", "cell_type": "markdown", "metadata": {}}, {"source": "1+2", "cell_type": "code", "execution_count": 1, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "3"}, "execution_count": 1, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "34.5*54.4", "cell_type": "code", "execution_count": 4, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "1876.8"}, "execution_count": 4, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "x=4;y=5", "cell_type": "code", "execution_count": 10, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "x+y", "cell_type": "code", "execution_count": 11, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "9"}, "execution_count": 11, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "x=1;y=5\nx+y", "cell_type": "code", "execution_count": 9, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "6"}, "execution_count": 9, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "1/2", "cell_type": "code", "execution_count": 12, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "0"}, "execution_count": 12, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "5**2", "cell_type": "code", "execution_count": 129, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "25"}, "execution_count": 129, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "### Text", "cell_type": "markdown", "metadata": {}}, {"source": "1/2.", "cell_type": "code", "execution_count": 13, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "0.5"}, "execution_count": 13, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "a=\"hello\"; b=\" world\"\na+b", "cell_type": "code", "execution_count": 14, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "'hello world'"}, "execution_count": 14, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "a.count?\n", "cell_type": "code", "execution_count": 27, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "a.count('l')", "cell_type": "code", "execution_count": 29, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "2"}, "execution_count": 29, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "a.capitalize()", "cell_type": "code", "execution_count": 30, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "'Hello'"}, "execution_count": 30, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "### Arrays", "cell_type": "markdown", "metadata": {}}, {"source": "c=[1,2,3,10];d=[4,5,7,12]", "cell_type": "code", "execution_count": 32, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "print c[0],c[1],c[-1]", "cell_type": "code", "execution_count": 36, "outputs": [{"output_type": "stream", "name": "stdout", "text": "1 2 10\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "len(c)", "cell_type": "code", "execution_count": 37, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "4"}, "execution_count": 37, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "c.sort()", "cell_type": "code", "execution_count": 38, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "c", "cell_type": "code", "execution_count": 39, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[1, 2, 3, 10]"}, "execution_count": 39, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "c.append(-5)", "cell_type": "code", "execution_count": 40, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "c", "cell_type": "code", "execution_count": 41, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[1, 2, 3, 10, -5]"}, "execution_count": 41, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "c.sort()", "cell_type": "code", "execution_count": 42, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "c", "cell_type": "code", "execution_count": 43, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[-5, 1, 2, 3, 10]"}, "execution_count": 43, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "### Modules", "cell_type": "markdown", "metadata": {}}, {"source": "import math", "cell_type": "code", "execution_count": 44, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "math.", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "math.cos?", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "math.cos(3.)", "cell_type": "code", "execution_count": 45, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "-0.9899924966004454"}, "execution_count": 45, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "import math as m", "cell_type": "code", "execution_count": 46, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "m.exp(1.)", "cell_type": "code", "execution_count": 47, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "2.718281828459045"}, "execution_count": 47, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "from cmath import *", "cell_type": "code", "execution_count": 51, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "exp(1j)", "cell_type": "code", "execution_count": 52, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "(0.5403023058681398+0.8414709848078965j)"}, "execution_count": 52, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "exp(1j*2*pi)", "cell_type": "code", "execution_count": 53, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "(1-2.4492935982947064e-16j)"}, "execution_count": 53, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "polar(1+1j)", "cell_type": "code", "execution_count": 55, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "(1.4142135623730951, 0.7853981633974483)"}, "execution_count": 55, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "import scipy.constants as const", "cell_type": "code", "execution_count": 56, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "const.Avogadro", "cell_type": "code", "execution_count": 57, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "6.022140857e+23"}, "execution_count": 57, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "const.m_e", "cell_type": "code", "execution_count": 58, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "9.10938356e-31"}, "execution_count": 58, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "from scipy import integrate ", "cell_type": "code", "execution_count": 59, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "x2=lambda x: x**2", "cell_type": "code", "execution_count": 60, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "integrate.quad(x2,0,4)", "cell_type": "code", "execution_count": 61, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "(21.333333333333336, 2.368475785867001e-13)"}, "execution_count": 61, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "import numpy as np\na = np.matrix('1 2; 3 4')", "cell_type": "code", "execution_count": 74, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "a*a", "cell_type": "code", "execution_count": 77, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "matrix([[ 7, 10],\n        [15, 22]])"}, "execution_count": 77, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "np.linalg.det(a)", "cell_type": "code", "execution_count": 78, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "-2.0000000000000004"}, "execution_count": 78, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "### Programming", "cell_type": "markdown", "metadata": {}}, {"source": "for x in range(5):\n    print \"hello\",x,\"times\"", "cell_type": "code", "execution_count": 62, "outputs": [{"output_type": "stream", "name": "stdout", "text": "hello 0 times\nhello 1 times\nhello 2 times\nhello 3 times\nhello 4 times\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "sum=0\nfor x in range(0,101): # Gauss'es problem\n    sum=sum+x\nprint sum", "cell_type": "code", "execution_count": 71, "outputs": [{"output_type": "stream", "name": "stdout", "text": "5050\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "", "cell_type": "code", "execution_count": 63, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "def cube(x):\n    return x*x*x", "cell_type": "code", "execution_count": 65, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "print cube(1), cube(3)", "cell_type": "code", "execution_count": 67, "outputs": [{"output_type": "stream", "name": "stdout", "text": "1 27\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Summing al cubes from 1 to 100\nsum=0 \nfor x in range(0,101): \n    sum=sum+cube(x)\nprint sum", "cell_type": "code", "execution_count": 70, "outputs": [{"output_type": "stream", "name": "stdout", "text": "25502500\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Fibbonaci's numbers\nx,y=1,1\nfor i in range (1,10):\n    y,x=x+y,y\n    print y\n", "cell_type": "code", "execution_count": 72, "outputs": [{"output_type": "stream", "name": "stdout", "text": "2\n3\n5\n8\n13\n21\n34\n55\n89\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Finding primes\nprimes=[2]\ndef isPrime(x):\n    for i in primes:\n        if x%i==0:\n            return False\n    return True\nfor i in range (2,50):\n    if isPrime(i):\n        print (i)\n        primes.append(i)", "cell_type": "code", "execution_count": 83, "outputs": [{"output_type": "stream", "name": "stdout", "text": "3\n5\n7\n11\n13\n17\n19\n23\n29\n31\n37\n41\n43\n47\n"}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "def factorial(n): # calculate a factorial\n    if n==0: return 1\n    else:\n        return n*factorial(n-1)", "cell_type": "code", "execution_count": 84, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "factorial(5)", "cell_type": "code", "execution_count": 85, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "120"}, "execution_count": 85, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# or we can use already existing factorial\nmath.factorial(5)", "cell_type": "code", "execution_count": 86, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "120"}, "execution_count": 86, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# including TeX comments", "cell_type": "markdown", "metadata": {}}, {"source": "$$\\int^\\infty_0\\sqrt{exp^{i\\pi x^2}}$$", "cell_type": "markdown", "metadata": {}}, {"source": "# Plotting", "cell_type": "markdown", "metadata": {}}, {"source": "import pylab #makes python behave as if it was matlab\n%pylab inline\na=[1,2,3,4,5]\n\nplot(a,'.')", "cell_type": "code", "execution_count": 119, "outputs": [{"output_type": "stream", "name": "stdout", "text": "Populating the interactive namespace from numpy and matplotlib\n"}, {"output_type": "stream", "name": "stderr", "text": "WARNING: pylab import has clobbered these variables: ['pylab']\n`%matplotlib` prevents importing * from pylab and numpy\n"}, {"output_type": "execute_result", "data": {"text/plain": "[<matplotlib.lines.Line2D at 0x111664dd0>]"}, "execution_count": 119, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\npIYZ8pLUsP8Hvce2St+UdF8AAAAASUVORK5CYII=\n", "text/plain": "<matplotlib.figure.Figure at 0x111411050>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "x=linspace(0,10,100)", "cell_type": "code", "execution_count": 93, "outputs": [], "metadata": {"collapsed": false, "trusted": true}}, {"source": "y=sin(x) # amazing", "cell_type": "code", "execution_count": 94, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "x", "cell_type": "code", "execution_count": 97, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "array([  0.        ,   0.1010101 ,   0.2020202 ,   0.3030303 ,\n         0.4040404 ,   0.50505051,   0.60606061,   0.70707071,\n         0.80808081,   0.90909091,   1.01010101,   1.11111111,\n         1.21212121,   1.31313131,   1.41414141,   1.51515152,\n         1.61616162,   1.71717172,   1.81818182,   1.91919192,\n         2.02020202,   2.12121212,   2.22222222,   2.32323232,\n         2.42424242,   2.52525253,   2.62626263,   2.72727273,\n         2.82828283,   2.92929293,   3.03030303,   3.13131313,\n         3.23232323,   3.33333333,   3.43434343,   3.53535354,\n         3.63636364,   3.73737374,   3.83838384,   3.93939394,\n         4.04040404,   4.14141414,   4.24242424,   4.34343434,\n         4.44444444,   4.54545455,   4.64646465,   4.74747475,\n         4.84848485,   4.94949495,   5.05050505,   5.15151515,\n         5.25252525,   5.35353535,   5.45454545,   5.55555556,\n         5.65656566,   5.75757576,   5.85858586,   5.95959596,\n         6.06060606,   6.16161616,   6.26262626,   6.36363636,\n         6.46464646,   6.56565657,   6.66666667,   6.76767677,\n         6.86868687,   6.96969697,   7.07070707,   7.17171717,\n         7.27272727,   7.37373737,   7.47474747,   7.57575758,\n         7.67676768,   7.77777778,   7.87878788,   7.97979798,\n         8.08080808,   8.18181818,   8.28282828,   8.38383838,\n         8.48484848,   8.58585859,   8.68686869,   8.78787879,\n         8.88888889,   8.98989899,   9.09090909,   9.19191919,\n         9.29292929,   9.39393939,   9.49494949,   9.5959596 ,\n         9.6969697 ,   9.7979798 ,   9.8989899 ,  10.        ])"}, "execution_count": 97, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "plot(x,y)", "cell_type": "code", "execution_count": 98, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[<matplotlib.lines.Line2D at 0x110390bd0>]"}, "execution_count": 98, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\n", "text/plain": "<matplotlib.figure.Figure at 0x11009a110>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "plot(sin(x),cos(x*1.111)) # what do you expect here?", "cell_type": "code", "execution_count": 104, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[<matplotlib.lines.Line2D at 0x110c6a850>]"}, "execution_count": 104, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\nCDbm/3r41RnDLi23AAAAAElFTkSuQmCC\n", "text/plain": "<matplotlib.figure.Figure at 0x110865050>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# fitting\nx=[1,2,3,9]\ny=[1,4,1,3]\nz=polyfit(x,y,3) # third order polynomial fit\nf=poly1d(z)\n# calc new x's and y's\nx_new=linspace(x[0],x[-1],100) # plot fitting polynomial on finer mesh grid\ny_new=f(x_new) \nplot(x,y,'o',x_new,y_new) #plot both points and smooth curve on one graph\n", "cell_type": "code", "execution_count": 116, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[<matplotlib.lines.Line2D at 0x111167a90>,\n <matplotlib.lines.Line2D at 0x111167b90>]"}, "execution_count": 116, "metadata": {}}, {"output_type": "display_data", "data": {"image/png": "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\n", "text/plain": "<matplotlib.figure.Figure at 0x111111090>"}, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Geeky stuff -- functional programming and the like", "cell_type": "markdown", "metadata": {}}, {"source": "cube(3)", "cell_type": "code", "execution_count": 120, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "27"}, "execution_count": 120, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "map(cube,range(1,10)) # applying function to each element of the list", "cell_type": "code", "execution_count": 121, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[1, 8, 27, 64, 125, 216, 343, 512, 729]"}, "execution_count": 121, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "", "cell_type": "markdown", "metadata": {}}, {"source": "def add(x, y): return x+y", "cell_type": "code", "execution_count": 122, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}, {"source": "reduce(add,range(1,101)) # function applied to first and second elements, then to second and third...", "cell_type": "code", "execution_count": 124, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "5050"}, "execution_count": 124, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "[x**2 for x in range(0,10)]", "cell_type": "code", "execution_count": 125, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"}, "execution_count": 125, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]", "cell_type": "code", "execution_count": 126, "outputs": [{"output_type": "execute_result", "data": {"text/plain": "[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]"}, "execution_count": 126, "metadata": {}}], "metadata": {"collapsed": false, "trusted": true}}, {"source": "# Problems", "cell_type": "markdown", "metadata": {}}, {"source": "# calculate the exponent by summing up the series\n# calculate pi by calculating are of a circle, manually\n# plot least-sq fit to four points\n# Find x,y such that x^2+y^2=z^2\n# plot the density of the prime numbers\n# How does noise affect a fourier spectrum of singal? At what noise level one cannot tell sign from noise?\n", "cell_type": "code", "execution_count": null, "outputs": [], "metadata": {"collapsed": true, "trusted": true}}], "metadata": {"kernelspec": {"display_name": "Python [Root]", "name": "Python [Root]", "language": "python"}, "language_info": {"mimetype": "text/x-python", "nbconvert_exporter": "python", "name": "python", "pygments_lexer": "ipython2", "version": "2.7.12", "file_extension": ".py", "codemirror_mode": {"version": 2, "name": "ipython"}}, "anaconda-cloud": {"environment": null, "summary": "Python tutorial"}}}